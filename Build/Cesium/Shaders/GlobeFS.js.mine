//This file is automatically rebuilt by the Cesium build process.
/*global define*/
define(function() {
    'use strict';
    return "#ifdef GL_EXT_frag_depth\n\
#extension GL_EXT_frag_depth : enable\n\
#endif\n\
uniform vec4 u_initialColor;\n\
uniform float u_GlobeAlpha;\n\
#ifdef GL_OES_standard_derivatives\n\
#extension GL_OES_standard_derivatives : enable\n\
#endif\n\
#if TEXTURE_UNITS > 0\n\
uniform sampler2D u_dayTextures[TEXTURE_UNITS];\n\
uniform vec4 u_dayTextureTranslationAndScale[TEXTURE_UNITS];\n\
uniform bool u_dayTextureUseWebMercatorT[TEXTURE_UNITS];\n\
#ifdef APPLY_ALPHA\n\
uniform float u_dayTextureAlpha[TEXTURE_UNITS];\n\
#endif\n\
#ifdef APPLY_SPLIT\n\
uniform float u_dayTextureSplit[TEXTURE_UNITS];\n\
#endif\n\
#ifdef APPLY_BRIGHTNESS\n\
uniform float u_dayTextureBrightness[TEXTURE_UNITS];\n\
#endif\n\
#ifdef APPLY_CONTRAST\n\
uniform float u_dayTextureContrast[TEXTURE_UNITS];\n\
#endif\n\
#ifdef APPLY_HUE\n\
uniform float u_dayTextureHue[TEXTURE_UNITS];\n\
#endif\n\
#ifdef APPLY_SATURATION\n\
uniform float u_dayTextureSaturation[TEXTURE_UNITS];\n\
#endif\n\
#ifdef APPLY_GAMMA\n\
uniform float u_dayTextureOneOverGamma[TEXTURE_UNITS];\n\
#endif\n\
uniform vec4 u_dayTextureTexCoordsRectangle[TEXTURE_UNITS];\n\
#endif\n\
#ifdef SHOW_REFLECTIVE_OCEAN\n\
uniform sampler2D u_waterMask;\n\
uniform vec4 u_waterMaskTranslationAndScale;\n\
uniform float u_zoomedOutOceanSpecularIntensity;\n\
#endif\n\
#ifdef SHOW_OCEAN_WAVES\n\
uniform sampler2D u_oceanNormalMap;\n\
#endif\n\
#ifdef ENABLE_DAYNIGHT_SHADING\n\
uniform vec2 u_lightingFadeDistance;\n\
#endif\n\
#ifdef SHOW_NORMAL_MAP\n\
uniform sampler2D u_normalTexture;\n\
uniform sampler2D uSlopeColorTexture;\n\
uniform sampler2D uSlopeArrowsTexture;\n\
uniform sampler2D uSlopePolygonTexture;\n\
uniform vec4 u_normalTextureTranslationAndScale;\n\
uniform float uSlopeHasColorTable;\n\
uniform float uSlopeFillMode;\n\
uniform float uSlopeOpacity;\n\
uniform float uSlopeFloor;\n\
uniform float uSlopeCeil;\n\
uniform float uSlopeMinVisibleValue;\n\
uniform float uSlopeMaxVisibleValue;\n\
uniform float uHasSlopeRegion;\n\
uniform vec4 uSlopeRect;\n\
const float PI = 3.1415926535897932384626;\n\
varying vec2 texCoordRotate;\n\
varying float arrowTextureScale;\n\
varying vec3 vertNorm;\n\
#endif\n\
varying vec3 v_positionMC;\n\
varying vec3 v_positionEC;\n\
varying vec3 v_textureCoordinates;\n\
varying vec3 v_normalMC;\n\
varying vec3 v_normalEC;\n\
varying float height;\n\
uniform sampler2D uHypsometricTexture;\n\
uniform sampler2D uHypsometricRenderTexture;\n\
uniform float uHypHasColorTable;\n\
uniform float uHypContourFillMode;\n\
uniform float uHypContourInterval;\n\
uniform float uHypOpacity;\n\
uniform float uHypMaxVisibleValue;\n\
uniform float uHypMinVisibleValue;\n\
uniform float uHypFloor;\n\
uniform float uHypCeil;\n\
uniform vec4 uHypLineColor;\n\
uniform float uHypHasAnalysisRegion;\n\
uniform vec4 uTileBounds;\n\
uniform vec4 uHypRect;\n\
#ifdef FOG\n\
varying float v_distance;\n\
varying vec3 v_rayleighColor;\n\
varying vec3 v_mieColor;\n\
#endif\n\
#ifdef Modify_Region\n\
uniform vec4 uModifyRect;\n\
uniform sampler2D uModifyTexture;\n\
#endif\n\
#ifdef Excavate_Region\n\
uniform vec4 uExcavateRect;\n\
uniform sampler2D uExcavateTexture;\n\
#endif\n\
vec4 sampleAndBlend(\n\
vec4 previousColor,\n\
sampler2D texture,\n\
vec2 tileTextureCoordinates,\n\
vec4 textureCoordinateRectangle,\n\
vec4 textureCoordinateTranslationAndScale,\n\
float textureAlpha,\n\
float textureBrightness,\n\
float textureContrast,\n\
float textureHue,\n\
float textureSaturation,\n\
float textureOneOverGamma,\n\
float split)\n\
{\n\
vec2 alphaMultiplier = step(textureCoordinateRectangle.st, tileTextureCoordinates);\n\
textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\n\
alphaMultiplier = step(vec2(0.0), textureCoordinateRectangle.pq - tileTextureCoordinates);\n\
textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\n\
vec2 translation = textureCoordinateTranslationAndScale.xy;\n\
vec2 scale = textureCoordinateTranslationAndScale.zw;\n\
vec2 textureCoordinates = tileTextureCoordinates * scale + translation;\n\
vec4 value = texture2D(texture, textureCoordinates);\n\
vec3 color = value.rgb;\n\
float alpha = value.a;\n\
#ifdef APPLY_SPLIT\n\
float splitPosition = czm_imagerySplitPosition;\n\
if (split < 0.0 && gl_FragCoord.x > splitPosition) {\n\
alpha = 0.0;\n\
}\n\
else if (split > 0.0 && gl_FragCoord.x < splitPosition) {\n\
alpha = 0.0;\n\
}\n\
#endif\n\
#ifdef APPLY_BRIGHTNESS\n\
color = mix(vec3(0.0), color, textureBrightness);\n\
#endif\n\
#ifdef APPLY_CONTRAST\n\
color = mix(vec3(0.5), color, textureContrast);\n\
#endif\n\
#ifdef APPLY_HUE\n\
color = czm_hue(color, textureHue);\n\
#endif\n\
#ifdef APPLY_SATURATION\n\
color = czm_saturation(color, textureSaturation);\n\
#endif\n\
#ifdef APPLY_GAMMA\n\
color = pow(color, vec3(textureOneOverGamma));\n\
#endif\n\
float sourceAlpha = alpha * textureAlpha;\n\
float outAlpha = mix(previousColor.a, 1.0, sourceAlpha);\n\
vec3 outColor = mix(previousColor.rgb * previousColor.a, color, sourceAlpha) / outAlpha;\n\
return vec4(outColor, outAlpha);\n\
}\n\
vec4 computeDayColor(vec4 initialColor, vec3 textureCoordinates);\n\
vec4 computeWaterColor(vec3 positionEyeCoordinates, vec2 textureCoordinates, mat3 enuToEye, vec4 imageryColor, float specularMapValue);\n\
float computeMixCon()\n\
{\n\
float distanceToContour = mod(height - 0.0002, uHypContourInterval);\n\
float dxc = abs(dFdx(height));\n\
float dyc = abs(dFdy(height));\n\
float dF = max(dxc, dyc);\n\
return (distanceToContour < dF) ? 1.0 : 0.0;\n\
}\n\
vec4 computeContourMapColor()\n\
{\n\
float threshold = clamp(abs(uHypCeil - uHypFloor), 0.000001, 20000.0);\n\
float contourRate = (height - uHypFloor) / threshold;\n\
float finalCoord = clamp(contourRate, 0.0, 1.0);\n\
vec2 contourCoord = vec2(0.0, finalCoord);\n\
return texture2D(uHypsometricTexture, contourCoord).rgba;\n\
}\n\
#ifdef SHOW_NORMAL_MAP\n\
void directionalLight(in vec3 normal, inout vec4 ambient, inout vec4 diffuse, inout vec4 specular)\n\
{\n\
vec3 eye = -normalize(v_positionEC);\n\
vec3 vp = -normalize(czm_sunDirectionEC);\n\
vec3 halfVector = normalize(vp+eye);\n\
float nDotVP = max(0.0, dot(normal, vp));\n\
float nDotHV = max(0.0, dot(normal, halfVector));\n\
float shininess = 50.0;\n\
float powerFactor = max(0.0, pow(nDotHV, shininess));\n\
ambient += vec4(0.6, 0.6, 0.6, 1.0);\n\
diffuse += vec4(0.8, 0.8, 0.8, 1.0) * nDotVP;\n\
specular += vec4(0.0, 0.0, 0.0, 1.0) * powerFactor;\n\
}\n\
vec4 ComputeSlopeArrowColor(in float slopeAngle,in vec2 normalTextureCoordinates)\n\
{\n\
if (slopeAngle <= PI/180.0)\n\
{\n\
return vec4(0.0);\n\
}\n\
vec2 limitTexCoord = fract(texCoordRotate);\n\
vec2 texCoordDir = (floor(normalTextureCoordinates * arrowTextureScale) + 0.9)/arrowTextureScale;\n\
vec3 realNormalDir = texture2D(u_normalTexture, texCoordDir.xy).xyz;\n\
realNormalDir = (realNormalDir - 0.5) * 2.0;\n\
vec2 slopeDirection = realNormalDir.xy;\n\
vec4 arrowsTexColor = vec4(0.0);\n\
float arrowAlpha = 0.0;\n\
float distance = length(slopeDirection);\n\
float acosSlopeDirection = acos(slopeDirection.x/distance);\n\
float slopeArrowsAngle = acosSlopeDirection;\n\
if(slopeDirection.y<0.0)\n\
{\n\
slopeArrowsAngle = 2.0 * PI - acosSlopeDirection;\n\
}\n\
vec2 n = vec2(cos(slopeArrowsAngle),-sin(slopeArrowsAngle));\n\
vec2 t = vec2(sin(slopeArrowsAngle),cos(slopeArrowsAngle));\n\
mat2 slopeRotateZMatrix = mat2(n,t);\n\
vec2 transCoord = limitTexCoord - vec2(0.5,0.5);\n\
transCoord = slopeRotateZMatrix * transCoord ;\n\
transCoord += vec2(0.5,0.5);\n\
transCoord = smoothstep(0.0,1.0,transCoord);\n\
arrowsTexColor = texture2D(uSlopeArrowsTexture, transCoord);\n\
arrowAlpha = arrowsTexColor.a;\n\
float xNum = floor(transCoord.x * 64.0);\n\
float yNum = floor(transCoord.y * 64.0);\n\
if ((xNum<=2.0||xNum>=61.0||yNum<=2.0||yNum>=61.0)&&arrowAlpha<1.0)\n\
{\n\
arrowAlpha = 0.0;\n\
}\n\
arrowsTexColor = vec4(arrowsTexColor.rgb,arrowAlpha);\n\
return arrowsTexColor;\n\
}\n\
#endif\n\
void main()\n\
{\n\
#ifdef Height_Map\n\
gl_FragColor = czm_packValue(height);\n\
return;\n\
#endif\n\
#ifdef Modify_Region\n\
vec2 modifyTexCoord = v_textureCoordinates.xy;\n\
modifyTexCoord.x = modifyTexCoord.x * (uTileBounds.z - uTileBounds.x) + uTileBounds.x;\n\
modifyTexCoord.y = modifyTexCoord.y * (uTileBounds.w - uTileBounds.y) + uTileBounds.y;\n\
if(modifyTexCoord.x>uModifyRect.x && modifyTexCoord.x<uModifyRect.z && modifyTexCoord.y> uModifyRect.y&& modifyTexCoord.y < uModifyRect.w)\n\
{\n\
modifyTexCoord.xy = modifyTexCoord.xy - vec2(uModifyRect.x, uModifyRect.w);\n\
modifyTexCoord.x = modifyTexCoord.x / (uModifyRect.z - uModifyRect.x);\n\
modifyTexCoord.y = 1.0 - modifyTexCoord.y / (uModifyRect.y - uModifyRect.w);\n\
vec4 modifyColor = texture2D(uModifyTexture, modifyTexCoord);\n\
if((modifyColor.r < 0.99 || modifyColor.g < 0.99 || modifyColor.b < 0.99))\n\
{\n\
discard;\n\
}\n\
}\n\
#endif\n\
#ifdef Excavate_Region\n\
vec2 excavateTexCoord = v_textureCoordinates.xy;\n\
excavateTexCoord.x = excavateTexCoord.x * (uTileBounds.z - uTileBounds.x) + uTileBounds.x;\n\
excavateTexCoord.y = excavateTexCoord.y * (uTileBounds.w - uTileBounds.y) + uTileBounds.y;\n\
if(excavateTexCoord.x>uExcavateRect.x && excavateTexCoord.x<uExcavateRect.z && excavateTexCoord.y> uExcavateRect.y&& excavateTexCoord.y < uExcavateRect.w)\n\
{\n\
excavateTexCoord.xy = excavateTexCoord.xy - vec2(uExcavateRect.x, uExcavateRect.w);\n\
excavateTexCoord.x = excavateTexCoord.x / (uExcavateRect.z - uExcavateRect.x);\n\
excavateTexCoord.y = 1.0 - excavateTexCoord.y / (uExcavateRect.y - uExcavateRect.w);\n\
vec4 excavateColor = texture2D(uExcavateTexture, excavateTexCoord);\n\
if((excavateColor.r < 0.99 || excavateColor.g < 0.99 || excavateColor.b < 0.99))\n\
{\n\
discard;\n\
}\n\
}\n\
#endif\n\
vec4 color = computeDayColor(u_initialColor, clamp(v_textureCoordinates, 0.0, 1.0));\n\
#ifdef SHOW_NORMAL_MAP\n\
vec2 normalTextureTranslation = u_normalTextureTranslationAndScale.xy;\n\
vec2 normalTextureScale = u_normalTextureTranslationAndScale.zw;\n\
vec2 normalTextureCoordinates = v_textureCoordinates.xy * normalTextureScale + normalTextureTranslation;\n\
vec3 realNormal = texture2D(u_normalTexture, normalTextureCoordinates.xy).xyz;\n\
realNormal = (realNormal - 0.5) * 2.0;\n\
vec3 zAxis = normalize(vertNorm);\n\
vec3 xAxis = normalize(vec3(-vertNorm.y, vertNorm.x, 0));\n\
vec3 yAxis = normalize(cross(zAxis, xAxis));\n\
mat3 matrix = mat3(xAxis, yAxis, zAxis);\n\
vec3 vNormal = matrix * realNormal;\n\
vec4 ambientTemp = vec4(0.0);\n\
vec4 diffuseTemp = vec4(0.0);\n\
vec4 specularTemp = vec4(0.0);\n\
directionalLight(vNormal, ambientTemp, diffuseTemp, specularTemp);\n\
color = ambientTemp*color + diffuseTemp*color + specularTemp*vec4(1.0);\n\
#endif\n\
#ifdef SHOW_TILE_BOUNDARIES\n\
if (v_textureCoordinates.x < (1.0/256.0) || v_textureCoordinates.x > (255.0/256.0) ||\n\
v_textureCoordinates.y < (1.0/256.0) || v_textureCoordinates.y > (255.0/256.0))\n\
{\n\
color = vec4(1.0, 0.0, 0.0, 1.0);\n\
}\n\
#endif\n\
#if defined(SHOW_REFLECTIVE_OCEAN) || defined(ENABLE_DAYNIGHT_SHADING)\n\
vec3 normalMC = czm_geodeticSurfaceNormal(v_positionMC, vec3(0.0), vec3(1.0));\n\
vec3 normalEC = czm_normal3D * normalMC;\n\
#endif\n\
#ifdef SHOW_REFLECTIVE_OCEAN\n\
vec2 waterMaskTranslation = u_waterMaskTranslationAndScale.xy;\n\
vec2 waterMaskScale = u_waterMaskTranslationAndScale.zw;\n\
vec2 waterMaskTextureCoordinates = v_textureCoordinates.xy * waterMaskScale + waterMaskTranslation;\n\
float mask = texture2D(u_waterMask, waterMaskTextureCoordinates).r;\n\
if (mask > 0.0)\n\
{\n\
mat3 enuToEye = czm_eastNorthUpToEyeCoordinates(v_positionMC, normalEC);\n\
vec2 ellipsoidTextureCoordinates = czm_ellipsoidWgs84TextureCoordinates(normalMC);\n\
vec2 ellipsoidFlippedTextureCoordinates = czm_ellipsoidWgs84TextureCoordinates(normalMC.zyx);\n\
vec2 textureCoordinates = mix(ellipsoidTextureCoordinates, ellipsoidFlippedTextureCoordinates, czm_morphTime * smoothstep(0.9, 0.95, normalMC.z));\n\
color = computeWaterColor(v_positionEC, textureCoordinates, enuToEye, color, mask);\n\
}\n\
#endif\n\
#ifdef ENABLE_VERTEX_LIGHTING\n\
float diffuseIntensity = clamp(czm_getLambertDiffuse(czm_sunDirectionEC, normalize(v_normalEC)) * 0.9 + 0.3, 0.0, 1.0);\n\
vec4 finalColor = vec4(color.rgb * diffuseIntensity, color.a);\n\
#elif defined(ENABLE_DAYNIGHT_SHADING)\n\
float diffuseIntensity = clamp(czm_getLambertDiffuse(czm_sunDirectionEC, normalEC) * 5.0 + 0.3, 0.0, 1.0);\n\
float cameraDist = length(czm_view[3]);\n\
float fadeOutDist = u_lightingFadeDistance.x;\n\
float fadeInDist = u_lightingFadeDistance.y;\n\
float t = clamp((cameraDist - fadeOutDist) / (fadeInDist - fadeOutDist), 0.0, 1.0);\n\
diffuseIntensity = mix(1.0, diffuseIntensity, t);\n\
vec4 finalColor = vec4(color.rgb * diffuseIntensity, color.a);\n\
#else\n\
vec4 finalColor = color;\n\
#endif\n\
#ifdef FOG\n\
const float fExposure = 2.0;\n\
vec3 fogColor = v_mieColor + finalColor.rgb * v_rayleighColor;\n\
fogColor = vec3(1.0) - exp(-fExposure * fogColor);\n\
gl_FragColor = vec4(czm_fog(v_distance, finalColor.rgb, fogColor), u_GlobeAlpha);\n\
#else\n\
gl_FragColor = vec4(finalColor.rgb,u_GlobeAlpha);;\n\
#endif\n\
if(uHypHasColorTable > 0.1)\n\
{\n\
float bNext = 1.0;\n\
if(uHypHasAnalysisRegion > 0.1)\n\
{\n\
vec2 polyTexCoord = v_textureCoordinates.xy;\n\
polyTexCoord.x = polyTexCoord.x * (uTileBounds.z - uTileBounds.x) + uTileBounds.x;\n\
polyTexCoord.y = polyTexCoord.y * (uTileBounds.w - uTileBounds.y) + uTileBounds.y;\n\
if(polyTexCoord.x>uHypRect.x && polyTexCoord.x<uHypRect.z && polyTexCoord.y> uHypRect.y&& polyTexCoord.y < uHypRect.w)\n\
{\n\
polyTexCoord.xy = polyTexCoord.xy - vec2(uHypRect.x, uHypRect.w);\n\
polyTexCoord.x = polyTexCoord.x / (uHypRect.z - uHypRect.x);\n\
polyTexCoord.y = 1.0-polyTexCoord.y / (uHypRect.y - uHypRect.w);\n\
vec4 hypColor = texture2D(uHypsometricRenderTexture, polyTexCoord);\n\
if(hypColor.r < 0.1)\n\
{\n\
bNext = 0.0;\n\
}\n\
}\n\
else\n\
{\n\
bNext = 0.0;\n\
}\n\
}\n\
if(bNext > 0.2)\n\
{\n\
vec4 contourMapColor = vec4(1.0);\n\
float finalOpacity = uHypOpacity;\n\
if(height <= uHypMaxVisibleValue && height >= uHypMinVisibleValue)\n\
{\n\
#ifdef GL_OES_standard_derivatives\n\
if(uHypContourFillMode > 2.9)\n\
{\n\
float mix_con = computeMixCon();\n\
contourMapColor = mix(computeContourMapColor(), uHypLineColor, mix_con);\n\
}\n\
else if(uHypContourFillMode > 1.9)\n\
{\n\
finalOpacity = computeMixCon();\n\
contourMapColor = uHypLineColor;\n\
}\n\
else if(uHypContourFillMode > 0.9)\n\
#else\n\
if(uHypContourFillMode > 0.9)\n\
#endif\n\
{\n\
contourMapColor = computeContourMapColor();\n\
}\n\
else\n\
{\n\
finalOpacity = 0.0;\n\
}\n\
}\n\
else\n\
{\n\
finalOpacity = 0.5;\n\
}\n\
gl_FragColor = mix(gl_FragColor, contourMapColor, finalOpacity);\n\
}\n\
}\n\
#ifdef SHOW_NORMAL_MAP\n\
if(uSlopeHasColorTable > 0.1)\n\
{\n\
float bIsSlopeColor = 1.0;\n\
if(uHasSlopeRegion > 0.1)\n\
{\n\
vec2 polyTexCoord = v_textureCoordinates.xy;\n\
polyTexCoord.x = polyTexCoord.x * (uTileBounds.z - uTileBounds.x) + uTileBounds.x;\n\
polyTexCoord.y = polyTexCoord.y * (uTileBounds.w - uTileBounds.y) + uTileBounds.y;\n\
if(polyTexCoord.x>uSlopeRect.x && polyTexCoord.x<uSlopeRect.z && polyTexCoord.y> uSlopeRect.y&& polyTexCoord.y < uSlopeRect.w)\n\
{\n\
polyTexCoord.xy = polyTexCoord.xy - vec2(uSlopeRect.x, uSlopeRect.w);\n\
polyTexCoord.x = polyTexCoord.x / (uSlopeRect.z - uSlopeRect.x);\n\
polyTexCoord.y = 1.0-polyTexCoord.y / (uSlopeRect.y - uSlopeRect.w);\n\
vec4 slopeColor = texture2D(uSlopePolygonTexture, polyTexCoord);\n\
if(slopeColor.r < 0.1)\n\
{\n\
bIsSlopeColor = 0.0;\n\
}\n\
}\n\
else\n\
{\n\
bIsSlopeColor = 0.0;\n\
}\n\
}\n\
if(bIsSlopeColor > 0.1)\n\
{\n\
float slopeRate = abs(normalize(realNormal).z);\n\
float slopeAngle = acos(slopeRate);\n\
if (slopeAngle < uSlopeMinVisibleValue || slopeAngle > uSlopeMaxVisibleValue)\n\
{\n\
return;\n\
}\n\
float threshold = clamp(abs(uSlopeCeil-uSlopeFloor),0.0000001,PI/2.0);\n\
float rate = (slopeAngle-uSlopeFloor)/threshold;\n\
float finalRate = clamp(rate,0.0,1.0);\n\
vec2 slopeCoord = vec2(0, finalRate);\n\
vec4 slopeFillColor = texture2D(uSlopeColorTexture, slopeCoord);\n\
float finalOpacity = uSlopeOpacity;\n\
vec4 slopeMapColor = vec4(0.0);\n\
if(uSlopeFillMode > 2.9)\n\
{\n\
vec4 arrowsTexColor = ComputeSlopeArrowColor(slopeAngle, normalTextureCoordinates);\n\
slopeMapColor = mix(slopeFillColor, arrowsTexColor, arrowsTexColor.a);\n\
}\n\
else if(uSlopeFillMode > 1.9)\n\
{\n\
vec4 arrowsTexColor = ComputeSlopeArrowColor(slopeAngle, normalTextureCoordinates);\n\
slopeMapColor = arrowsTexColor;\n\
finalOpacity = arrowsTexColor.a;\n\
}\n\
else if(uSlopeFillMode > 0.9)\n\
{\n\
slopeMapColor = slopeFillColor;\n\
}\n\
else\n\
{\n\
finalOpacity = 0.0;\n\
}\n\
gl_FragColor = mix(gl_FragColor, slopeMapColor, finalOpacity);\n\
return;\n\
}\n\
}\n\
#endif\n\
}\n\
#ifdef SHOW_REFLECTIVE_OCEAN\n\
float waveFade(float edge0, float edge1, float x)\n\
{\n\
float y = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n\
return pow(1.0 - y, 5.0);\n\
}\n\
float linearFade(float edge0, float edge1, float x)\n\
{\n\
return clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n\
}\n\
const float oceanFrequencyLowAltitude = 825000.0;\n\
const float oceanAnimationSpeedLowAltitude = 0.004;\n\
const float oceanOneOverAmplitudeLowAltitude = 1.0 / 2.0;\n\
const float oceanSpecularIntensity = 0.5;\n\
const float oceanFrequencyHighAltitude = 125000.0;\n\
const float oceanAnimationSpeedHighAltitude = 0.008;\n\
const float oceanOneOverAmplitudeHighAltitude = 1.0 / 2.0;\n\
vec4 computeWaterColor(vec3 positionEyeCoordinates, vec2 textureCoordinates, mat3 enuToEye, vec4 imageryColor, float maskValue)\n\
{\n\
vec3 positionToEyeEC = -positionEyeCoordinates;\n\
float positionToEyeECLength = length(positionToEyeEC);\n\
vec3 normalizedpositionToEyeEC = normalize(normalize(positionToEyeEC));\n\
float waveIntensity = waveFade(70000.0, 1000000.0, positionToEyeECLength);\n\
#ifdef SHOW_OCEAN_WAVES\n\
float time = czm_frameNumber * oceanAnimationSpeedHighAltitude;\n\
vec4 noise = czm_getWaterNoise(u_oceanNormalMap, textureCoordinates * oceanFrequencyHighAltitude, time, 0.0);\n\
vec3 normalTangentSpaceHighAltitude = vec3(noise.xy, noise.z * oceanOneOverAmplitudeHighAltitude);\n\
time = czm_frameNumber * oceanAnimationSpeedLowAltitude;\n\
noise = czm_getWaterNoise(u_oceanNormalMap, textureCoordinates * oceanFrequencyLowAltitude, time, 0.0);\n\
vec3 normalTangentSpaceLowAltitude = vec3(noise.xy, noise.z * oceanOneOverAmplitudeLowAltitude);\n\
float highAltitudeFade = linearFade(0.0, 60000.0, positionToEyeECLength);\n\
float lowAltitudeFade = 1.0 - linearFade(20000.0, 60000.0, positionToEyeECLength);\n\
vec3 normalTangentSpace =\n\
(highAltitudeFade * normalTangentSpaceHighAltitude) +\n\
(lowAltitudeFade * normalTangentSpaceLowAltitude);\n\
normalTangentSpace = normalize(normalTangentSpace);\n\
normalTangentSpace.xy *= waveIntensity;\n\
normalTangentSpace = normalize(normalTangentSpace);\n\
#else\n\
vec3 normalTangentSpace = vec3(0.0, 0.0, 1.0);\n\
#endif\n\
vec3 normalEC = enuToEye * normalTangentSpace;\n\
const vec3 waveHighlightColor = vec3(0.3, 0.45, 0.6);\n\
float diffuseIntensity = czm_getLambertDiffuse(czm_sunDirectionEC, normalEC) * maskValue;\n\
vec3 diffuseHighlight = waveHighlightColor * diffuseIntensity;\n\
#ifdef SHOW_OCEAN_WAVES\n\
float tsPerturbationRatio = normalTangentSpace.z;\n\
vec3 nonDiffuseHighlight = mix(waveHighlightColor * 5.0 * (1.0 - tsPerturbationRatio), vec3(0.0), diffuseIntensity);\n\
#else\n\
vec3 nonDiffuseHighlight = vec3(0.0);\n\
#endif\n\
float specularIntensity = czm_getSpecular(czm_sunDirectionEC, normalizedpositionToEyeEC, normalEC, 10.0) + 0.25 * czm_getSpecular(czm_moonDirectionEC, normalizedpositionToEyeEC, normalEC, 10.0);\n\
float surfaceReflectance = mix(0.0, mix(u_zoomedOutOceanSpecularIntensity, oceanSpecularIntensity, waveIntensity), maskValue);\n\
float specular = specularIntensity * surfaceReflectance;\n\
return vec4(imageryColor.rgb + diffuseHighlight + nonDiffuseHighlight + specular, imageryColor.a);\n\
}\n\
#endif // #ifdef SHOW_REFLECTIVE_OCEAN\n\
";
});